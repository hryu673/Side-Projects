import utils  # noqa: F401, do not remove if using a Mac
# add your imports BELOW this line
import matplotlib.pyplot as plt
import random


def ones_and_tens_digit_histogram(numbers):
    '''
    Input:
        a list of numbers.
    Returns:
        a list where the value at index i is the frequency in which digit i
        appeared in the ones place OR the tens place in the input list. This
        returned list will always have 10 numbers (representing the frequency
        of digits 0 - 9).

    For example, given the input list
        [127, 426, 28, 9, 90]
    This function will return
        [0.2, 0.0, 0.3, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1, 0.2]

    That is, the digit 0 occurred in 20% of the one and tens places; 2 in 30%
    of them; 6, 7, and 8 each in 10% of the ones and tens, and 9 occurred in
    20% of the ones and tens.

    See fraud_detection_tests.py for additional cases.
    '''
    histogram = [0] * 10

    # first fill histogram with counts
    for i in numbers:
        # 1's place
        histogram[i % 10] += 1

        # 10's place
        histogram[i // 10 % 10] += 1

    # normalize over total counts
    for i in range(len(histogram)):
        histogram[i] /= len(numbers) * 2

    return histogram

# Takes a file name and a list of column names and return a
# list of integers that contains the values in those columns
def extract_election_votes(filename, column_names):
    votes_list = []
    import csv
    f = open(filename)
    input_file = csv.DictReader(f)

    for row in input_file:
        for candidate in column_names:
            number = row[candidate].replace(',', '')
            vote = int(number)
            votes_list.append(vote)
    return votes_list


# Takes a histogram and graphs the frequencies of the ones
# and tens digits and saves the plot to a file. Returns
# nothing


def plot_iran_least_digits_histogram(histogram):
    x = range(len(histogram))
    y = histogram
    idealline = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]

    plt.plot(x, y, label="iran")
    plt.plot(x, idealline, label="ideal")
    plt.xlabel("Digit")
    plt.ylabel("Frequency")
    plt.legend(loc='upper left')
    plt.title("Distribution of the last two digits in Iranian dataset")
    plt.savefig("iran-digits.png")
    plt.show()
    return None


# Returns a random group of n numbers that are between 0 (inclusive)
# and 100 (exclusive) (Used for compare_iran_mse_to_samples function)
def build_n_nums(n):
    nums = []
    for freq in range(0, n):
        nums.append(random.randint(0, 99))
    return nums


# Creates five different groups of random numbers of various sizes.
# Plots the digit histograms for those groups against uniform line
def plot_dist_by_sample_size():
    for sizes in [10, 50, 100, 1000, 10000]:
        nums = []
        for freq in range(0, sizes):
            nums.append(random.randint(0, 99))
        hist = ones_and_tens_digit_histogram(nums)
        x = range(len(hist))
        y = hist
        plt.plot(x, y, label=f'{sizes} random numbers')

    plt.xlabel("Digit")
    plt.ylabel("Frequency")
    idealline = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
    plt.plot(x, idealline, label="ideal")
    plt.legend(loc='upper left')
    plt.title("Distribution of the last two digits in randomly generated \
             samples")
    plt.savefig("random-digits.png")
    plt.show()


# Calculates the mean squared error between two numbers
# returns the MSE
def mean_squared_error(numbers1, numbers2):
    sum = 0
    for i in range(len(numbers1)):
        sum += (numbers1[i] - numbers2[i])**2
    x = sum / len(numbers1)
    return x


# Takes a histogram and returns the MSE between the histogram
# and the uniform distribution (y = 0.1)
def calculate_mse_with_uniform(histogram):
    sum = 0
    for proportion in histogram:
        sum += (0.1 - proportion)**2
    mse = sum / len(histogram)
    return mse


# Compares the iran_mse to the 10,000 MSEs that are generated.
# Prints the respective number of MSEs that are >= and < than
# iran_mse. Calculates the p value for hypothesis testing.
def compare_iran_mse_to_samples(iran_mse, number_of_iran_datapoints):
    larger = 0
    smaller = 0
    for i in range(10000):
        group = build_n_nums(number_of_iran_datapoints)
        histogram = ones_and_tens_digit_histogram(group)
        mse = calculate_mse_with_uniform(histogram)
        if mse >= iran_mse:
            larger += 1
        else:
            smaller += 1
    p = larger / 10000
    print("2009 Iranian election MSE:", iran_mse)
    print(
        "Quantity of MSEs larger than or equal to "
        "the 2009 Iranian election MSE:",
        larger
    )
    print(
        "Quantity of MSEs smaller than the 2009 Iranian election MSE:",
        smaller
    )
    print(
        "2009 Iranian election null hypothesis rejection level p:",
        p
    )
    return None

def main():
    # Code that calls functions you have written above
    # e.g. extract_election_vote_counts() etc.
    # This code should produce the output expected from your program.
    numbers = extract_election_votes(
        "election-iran-2009.csv",
        ["Ahmadinejad", "Rezai", "Karrubi", "Mousavi"]
    )
    histogram = ones_and_tens_digit_histogram(numbers)
    plot_iran_least_digits_histogram(histogram)
    plot_dist_by_sample_size()
    mean_squared_error([1, 4, 9], [6, 5, 4])
    calculate_mse_with_uniform(histogram)
    build_n_nums(120)
    compare_iran_mse_to_samples(0.000739583333333, 120)


if __name__ == "__main__":
    main()
